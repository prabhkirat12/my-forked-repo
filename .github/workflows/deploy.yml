name: Unified Deploy Workflow

on:
  push:
    branches:
      - main  # Trigger workflow on pushes to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ secrets.DOCKER_USERNAME }}/photography-app:latest .
        echo "Pushing Docker image to DockerHub..."
        docker push ${{ secrets.DOCKER_USERNAME }}/photography-app:latest

    # Step 4: Deploy on Remote Server
    - name: Deploy to Remote Server
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: harshil
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          echo "Creating deployment directory..."
          mkdir -p ~/photography-app
          cd ~/photography-app

          echo "Generating Docker Compose file..."
          cat <<EOF > docker-compose.yml
          version: '3.8'

          services:
            app:
              image: ${{ secrets.DOCKER_USERNAME }}/photography-app:latest
              ports:
                - "8005:8005"
              environment:
                - DB_HOST=db
                - DB_PORT=3306
                - DB_USER=root
                - DB_PASSWORD=my-secret-pw
                - DB_NAME=photodb
              depends_on:
                - db

            db:
              image: mysql:8
              restart: always
              environment:
                MYSQL_ROOT_PASSWORD: my-secret-pw
                MYSQL_DATABASE: photodb
              ports:
                - "3306:3306"
          EOF

          echo "Pulling latest Docker image..."
          docker-compose pull

          echo "Stopping existing containers..."
          docker-compose down || true

          echo "Starting new containers..."
          docker-compose up -d

          echo "Deployment completed successfully!"
